require('dotenv').config();
const { expect } = require("chai");
const { artifacts } = require("hardhat");
const hre = require("hardhat");
const hostABI = require("@superfluid-finance/ethereum-contracts/build/contracts/Superfluid.json");
const cfaABI = require("@superfluid-finance/ethereum-contracts/build/contracts/ConstantFlowAgreementV1.json");
const fUSDCx = require("./fUSDCx");
const myAccount = process.env.ACCOUNT;

const getProvider = (() => {

  const Web3 = require("web3");
  hre.Web3 = Web3;

  // hre.network.provider is an EIP1193-compatible provider.
  hre.web3 = new Web3(hre.network.provider);
});

getProvider();

const RedirectAll = artifacts.require("RedirectAll");
const TradeableCashflow = artifacts.require("TradeableCashflow");

describe("Tradeable Cashflow", function () {

  async function mineBlocks() {
    for (let i = 1; i <= 10; i++) {
      await hre.network.provider.request({
        method: "evm_mine",
        params: [],
      });
    }
  }

let redirectAll;
let tradeableCashflow;
let _host;
let _cfa;
let acct1;
let acct2;
let superUSDC;

beforeEach(async () => {
    //truffle version of testing with web3 to keep it consistent
    console.log(myAccount)
    redirectAll = await RedirectAll.new("0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9", "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199")
    
    tradeableCashflow = await TradeableCashflow.new(myAccount, "Holy Grail", "GRAIL", "0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9", "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a")

    //get contract instances of each of the protocol contracts using web3.js 
    _host = new hre.web3.eth.Contract(hostABI.abi, "0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9");
    _cfa = new hre.web3.eth.Contract(cfaABI.abi, "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8");
    superUSDC = new hre.web3.eth.Contract(fUSDCx, "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a");

    //account that we know has fUSDCx
    acct1 = myAccount;
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [acct1],
    });

    //account generated by hardhat runtime environment
    acct2 = "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199";
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [acct2],
    });
  })

  it("Initial flow is correct", async function () {
    
    const netFlowBeforeGrail = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount).call();
  
    //create a flow to our tradeable cash flow holy grail nft
    const tx = await _cfa.methods.createFlow(
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      tradeableCashflow.address,
      "385802469135802",
      "0x"
    )
    .encodeABI()
    //create flow...
    await _host.methods.callAgreement(
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", tx, "0x").send({from: myAccount, type: "0x2"})

    const grailflowInfo = await _cfa.methods.getFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount, tradeableCashflow.address).call();
    const netFlowAfterGrail = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount).call();

    const receiverArray = await tradeableCashflow.currentReceiver();
    console.log("Net Flow Before Grail: " + netFlowBeforeGrail);
    console.log("Net Flow After Grail: " + netFlowAfterGrail);
    console.log("Flow Rate: " + grailflowInfo.flowRate);
   
    //flow should be sent to the minter of tradable cashflow
    expect(Number(receiverArray[1])).to.equal(Number(myAccount));
    //flow rate should be the flow rate that we entered initially
    expect(grailflowInfo.flowRate.toString()).to.equal("385802469135802");
    //our initial owner should have an effective change in flow rate of 0 - they're sending value to themselves
    expect(Number(netFlowAfterGrail) - Number(netFlowBeforeGrail)).to.equal(0);
    
  });

  it("Change in flow rate to holy grail results in change in flow rate to owner", async function () {
    //create a flow to our tradeable cash flow holy grail nft
    const tx = await _cfa.methods.createFlow(
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      tradeableCashflow.address,
      "385802469135802",
      "0x"
  )
  .encodeABI()
  //create flow...
    await _host.methods.callAgreement(
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", tx, "0x").send({from: myAccount, type: "0x2"})

const grailFlowInfoBeforeUpdate = await _cfa.methods.getFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount, tradeableCashflow.address).call();
//update flow to our tradeable cash flow holy grail nft
    const updateTx = await _cfa.methods.updateFlow(
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      tradeableCashflow.address,
      "100000000000000",
      "0x"
  )
  .encodeABI()
  //create flow...
    await _host.methods.callAgreement(
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", updateTx, "0x").send({from: myAccount, type: "0x2"})

    const grailflowInfo = await _cfa.methods.getFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount, tradeableCashflow.address).call();

    console.log("Grail flow before update: " + grailFlowInfoBeforeUpdate.flowRate.toString());
    console.log("Grail flow after update: " + grailflowInfo.flowRate.toString());
    expect(grailFlowInfoBeforeUpdate.flowRate.toString()).to.equal("385802469135802")
    expect(grailflowInfo.flowRate.toString()).to.equal("100000000000000");

  });

  it("Change in holy grail owner results in change in flow recipient", async function () {
    //create a flow to our tradeable cash flow holy grail nft
    const tx = await _cfa.methods.createFlow(
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      tradeableCashflow.address,
      "385802469135802",
      "0x"
    )
    .encodeABI()
    //create flow...
      await _host.methods.callAgreement(
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", tx, "0x").send({from: myAccount, type: "0x2"})

      const grailflowInfo = await _cfa.methods.getFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount, tradeableCashflow.address).call();
      const userFlowInfo = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount).call();

      // transfer the holy grail to a new user
      await tradeableCashflow.contract.methods.transferFrom(myAccount, "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199", 1).send({from: myAccount})

      const newUserFlow = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199").call();
      console.log("newUserFlow: " + newUserFlow);

      const receiverArray = await tradeableCashflow.currentReceiver();
    
      // expect the new flow receiver to be the address we sent the NFT to
      expect(Number(receiverArray[1])).to.equal(Number("0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199"));
      //expect the address we sent the NFT to to now have a newFlow = the flow rate of our stream
      expect(newUserFlow.toString()).to.equal(grailflowInfo.flowRate.toString());
    });


    it("Flow sends funds to user", async function () {

      //get token balance before the user is sent the holy grail
      const userTokenBalanceBefore = await superUSDC.methods.balanceOf("0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199").call();

      //create a flow to our tradeable cash flow holy grail nft
      const tx = await _cfa.methods.createFlow(
        "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
        tradeableCashflow.address,
        "385802469135802",
        "0x"
      )
      .encodeABI()
      //create flow...
        await _host.methods.callAgreement(
        "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", tx, "0x").send({from: myAccount, type: "0x2"})
  
        // transfer the holy grail to a new user
        await tradeableCashflow.contract.methods.transferFrom(myAccount, "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199", 1).send({from: myAccount})
  
        const newUserFlow = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199").call();
        console.log("newUserFlow: " + newUserFlow);
          
        await mineBlocks();
        const userTokenBalanceAfter = await superUSDC.methods.balanceOf("0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199").call();
        
        console.log("User balance before flow: " + userTokenBalanceBefore)
        console.log("User balance after flow: " + userTokenBalanceAfter)

        expect(Number(userTokenBalanceBefore)).to.be.lessThan(Number(userTokenBalanceAfter))
        
      });
  
});